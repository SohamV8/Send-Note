.ai-back {
  width: 100%;
  min-height: 100vh;
  position: relative;
  background: #000;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  overflow: hidden;
  padding: 1rem;
  box-sizing: border-box;
}

.torn {
  width: 100%;
  height: auto;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 10;
  object-fit: cover;
}

/* Container styling */
.hyperplexed-container {
  z-index: 20;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  text-align: center;
  width: 100%;
  max-width: 1200px;
  margin: 2rem 0;
}

/* H1 styling */
.hyperplexed-container h1 {
  font-family: 'Space Mono', monospace;
  font-size: clamp(2rem, 8vw, 7rem);
  color: white;
  padding: 0.5rem clamp(0.5rem, 2vw, 1.5rem);
  border-radius: 0.5rem;
  margin: 0.25rem 0;
  transition: background-color 0.3s ease, color 0.3s ease;
  cursor: pointer;
  user-select: none;
}

.hyperplexed-container h1:first-of-type {
  font-size: clamp(2.5rem, 10vw, 8rem);
}

.hyperplexed-container h1:last-of-type {
  font-size: clamp(1.5rem, 6vw, 3rem);
}

.hyperplexed-container h1:hover,
.hyperplexed-container h1:focus {
  background-color: white;
  color: black;
  outline: none;
}

/* Button styling */
.container-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1rem;
  z-index: 1000;
  margin-top: auto;
}

.btn-ai {
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: 50px;
  border: none;
  background: none;
  position: relative;
  padding: 2px;
  text-decoration: none;
  transition: transform 0.2s ease-in-out;
  transform: translate3d(0, 0, 0);
}

.btn-ai::after,
.btn-ai::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 52px;
  background-image: conic-gradient(
    from var(--angle) at 50% 50%,
    transparent 0%,
    transparent 33%,
    var(--glowColor) 50%,
    transparent 66%,
    transparent 100%
  );
  animation: rotate 2s infinite linear;
}

.btn-ai::before {
  filter: blur(15px);
}

.btn-inner {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.75rem 2rem;
  border-radius: 50px;
  color: var(--color-green);
  font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
  font-weight: 500;
  font-size: clamp(1rem, 4vw, 1.5rem);
  z-index: 1;
  transition: all 0.2s ease;
  background: rgba(0, 0, 0, 0.4);
  backdrop-filter: blur(20px);
}

.btn-ai:hover .btn-inner {
  background: rgba(88, 221, 147, 0.15);
  color: #86e7b3;
}

.btn-ai:active {
  transform: scale(0.95);
}

/* Responsive Styles */
@media (max-width: 1024px) {
  .hyperplexed-container {
    margin: 1.5rem 0;
  }

  .hyperplexed-container h1:first-of-type {
    font-size: clamp(2rem, 8vw, 6rem);
  }

  .hyperplexed-container h1:last-of-type {
    font-size: clamp(1.25rem, 5vw, 2.5rem);
  }

  .btn-inner {
    padding: 0.5rem 1.5rem;
    font-size: clamp(0.9rem, 3.5vw, 1.25rem);
  }

  .torn {
    top: -10px;
  }
}

@media (max-width: 768px) {
  .ai-back {
    padding: 0.5rem;
  }

  .hyperplexed-container {
    margin: 1rem 0;
  }

  .hyperplexed-container h1:first-of-type {
    font-size: clamp(1.75rem, 7vw, 4rem);
  }

  .hyperplexed-container h1:last-of-type {
    font-size: clamp(1rem, 4.5vw, 2rem);
  }

  .btn-inner {
    padding: 0.5rem 1.25rem;
    font-size: clamp(0.8rem, 3vw, 1rem);
  }

  .torn {
    top: -5px;
  }
}

@media (max-width: 480px) {
  .hyperplexed-container {
    margin: 0.5rem 0;
  }

  .hyperplexed-container h1:first-of-type {
    font-size: clamp(1.5rem, 6vw, 3rem);
  }

  .hyperplexed-container h1:last-of-type {
    font-size: clamp(0.9rem, 4vw, 1.5rem);
  }

  .btn-inner {
    padding: 0.5rem 1rem;
    font-size: clamp(0.75rem, 2.5vw, 0.9rem);
  }
}

/* CSS Variables */
:root {
  --size-default: 1.5rem;
  --size-sm: 1rem;
  --color-green: #58dd93;
  --color-black: #000;
}

@property --angle {
  syntax: '<angle>';
  initial-value: 0deg;
  inherits: false;
}

@property --glowColor {
  syntax: '<color>';
  initial-value: var(--color-green);
}

@keyframes rotate {
  to {
    --angle: 360deg;
  }
}